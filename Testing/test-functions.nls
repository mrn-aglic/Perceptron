to test-perceptron
  
  let num-examples-predefined 1000
  
  set dataset generate-test-dataset num-examples-predefined 
  
  begin-train
  
end

to-report target-answer
  
  let a [ activation ] of min-one-of input-nodes [ who ] = 1
  let b [ activation ] of max-one-of input-nodes [ who ] = 1
  
  report ifelse-value runresult ( word "a " target-function " b" ) [ 1 ][ -1 ] 
  
end

to-report generate-test-dataset [ _count ]
  
  report n-values _count [ generate-dataset-pair ]

end

;; a dataset pair is an input vector x with a target vector y
;; the input vector x consists of elements fed into the input neurons and thus has to have the
;; same dimension as the number of input neurons
;; the target vector y has a dimension equal to the number of output neurons
to-report generate-dataset-pair
  
  let a get-random
  let b get-random
  
  let c ifelse-value ( target-function = "nand" or target-function = "nor" ) 
        [ ifelse-value runresult ( word target-function " a = 1" " b = 1" ) [ 1 ] [ -1 ] ] 
        [ ifelse-value runresult ( word "a = 1 " target-function " b = 1" ) [ 1 ] [ -1 ] ]
  
  let input-vector (list a b)
  let target-vector (list c)
 
  report ( list input-vector target-vector )
  
end

to user-entered-test [ in1 in2 ]
  
  let result get-result-for-user-test-input in1 in2
  let correct? ifelse-value ( result = target-answer ) [ "correct" ] [ "incorrect" ]
  
  user-message (word
    "The expected answer for " in1 " " target-function " " in2 " is " target-answer ".\n\n"
    "The network reported " result ", which is " correct? ".")
  
end

to-report get-result-for-user-test-input [ in1 in2 ]

  let af ifelse-value ( activation-function = "sign" ) 
            [ task [ sign ? 0 ] ] 
            [ task activation-function ]
    
  activate-inputs (list in1 in2)
  
  compute-activation af 
  
  let output-answer [activation] of one-of output-nodes
  
  report output-answer

end

to-report get-random

  report ifelse-value ( random 2 = 0 ) [ 1 ] [ -1 ]
  
end
