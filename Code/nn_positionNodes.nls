to position-nodes
  
  position-in-nodes
  position-hidden-nodes
  position-out-nodes
  
end

to position-in-nodes
  
  let inx max-pxcor / ( num-hidden-layers + 3 )
  let iny max-pycor
  let d ceiling  ( - ( min-pycor /  ( num-in-nodes + 2 ) ) )
  
  ask min-one-of bias-nodes [who] 
  [
    set iny iny - d
    
    setxy inx iny
    
    set input-bias? true
    set added-to-layer? true
  ]
  
  foreach (sort-on [who] input-nodes )
  [
    set iny iny - d
    
    ask ? [ setxy inx iny ]
  ]
  
end

to position-hidden-nodes
  
  let hx max-pxcor / ( num-hidden-layers + 3 )
  
  foreach table:keys nodes-per-hidden-layer 
  [
    let hy max-pycor
    
    let ddy ceiling ( - ( min-pycor / ( table:get nodes-per-hidden-layer ? + 2 ) ) )
    let l ?
    
    ask min-one-of bias-nodes with [ not added-to-layer? and not input-bias? ] [who] 
    [
      set layer l
      
      set hy hy - ddy
      
      setxy ( hx + ( l + 1 ) * hx ) hy 
      
      set added-to-layer? true
    ]
    
    foreach sort-on [who] hidden-nodes with [layer = l]
    [
      set hy hy - ddy
      
      ask ? [ setxy (hx + ( l + 1 ) * hx) hy ] 
    ]
  ]
  
end

to position-out-nodes
  
  let outx max-pxcor / ( num-hidden-layers + 3 )
  let outy max-pycor
  let d ceiling ( - ( min-pycor / ( num-out-nodes + 1 ) ) )
  
  foreach (sort-on [who] output-nodes)
  [
    set outy outy - d
    
    ask ? [ setxy ( max-pxcor - outx ) outy ]
  ]
  
end
